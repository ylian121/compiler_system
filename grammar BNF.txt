// start from the top when writing grammar
// all lowercase words: non-terminal
// words starting with uppercase: actual token

prog:
    | func prog

func: Func Ident LeftParen param_list RightParen block

param_list:
          | Int Ident ,
          | Int Ident

block: LeftCurly stmts RightCurly

stmts: 
     | stmt stmts

stmt: Int LeftBracket Num RightBracket Ident Semicolon
    | Int Ident Semicolon
    | Int Ident Assign Num Semicolon
    | Ident Assign exp Semicolon
    | Ident LeftBracket Num RightBracket Assign exp Semicolon
    | While condition block Semicolon
    | If condition block
    | If condition block Else condition block
    | Print LeftParen exp RightParen Semicolon
    | Read LeftParen Ident RightParen
    | Return Semicolon
    | Break Semicolon
    | Continue Semicolon

exp: 

condition:


// A -> epsilon | BC
// B -> f i l D r R L
// D -> ....
// R -> ....
// L -> ....